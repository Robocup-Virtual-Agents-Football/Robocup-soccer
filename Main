%% Preamble
close all;
clear all;
clc;

%% Simulation setup
% Time
simulationTime_total = 60;          % in seconds *------* YOU CAN CHANGE THIS
stepSize_time = 0.05;               % in seconds 

% Environment
canvasSize_horizontal = 10;
canvasSize_vertical   = 10;
stepSize_canvas       = 0.01;

% checkpoints & tolerance
checkpoint = [1 2 ;1.5 1 ;3 -2 ;-1 2 ;-0.7 -0.7];
% checkpoint = [5 2];
tolerance = 0.05;
i = 1;

%% Create Environment
obstacleMatrix = zeros(canvasSize_horizontal / stepSize_canvas, canvasSize_vertical / stepSize_canvas);

% Generate walls
% --> the variable "obstacleMatrix" is updated for each added wall
% [wall_1, obstacleMatrix] = WallGeneration( -1,  1, 1.2, 1.2, 'h', obstacleMatrix); 
% [wall_2, obstacleMatrix] = WallGeneration( -3, -3,  -2,   2, 'v', obstacleMatrix);

% *---------------------------*
%  YOU CAN ADD MORE WALLS HERE
% [wall_1, obstacleMatrix] = WallGeneration( -4, 0.5, 1, 1, 'h', obstacleMatrix); 
% [wall_2, obstacleMatrix] = WallGeneration( 2, 2, -1, 1, 'v', obstacleMatrix);
% [wall_3, obstacleMatrix] = WallGeneration( -2.5, -2.5, 2.5, 5, 'v', obstacleMatrix);
% *---------------------------*


%% Main simulation
% Initialize simulation 
timeSteps_total = simulationTime_total/stepSize_time;
state = state_initial;
time = 0;

% Run simulation
for timeStep = 1:timeSteps_total


    %% Neural network
%     [voltage_left, voltage_right] = NeuralController(sensorOut(1),sensorOut(2), NeuralParameters);
%     voltages = [voltage_left; voltage_left; voltage_right; voltage_right];

    %%

    
    % Run model *** DO NOT CHANGE
%     [state_derivative(timeStep,:), state(timeStep,:)] = DynamicalModel(voltages, state(timeStep,:), stepSize_time);   
    
    % Euler intergration *** DO NOT CHANGE
    state(timeStep + 1,:) = state(timeStep,:) + (state_derivative(timeStep,:) * stepSize_time); 
    time(timeStep + 1)    = timeStep * stepSize_time;
    
    % Plot robot on canvas  *------* YOU CAN ADD STUFF HERE
    figure(1); clf; hold on; grid on; axis([-5,5,-5,5]);
    DrawSoccer([0 0], 2, 'b');
%     plot(wall_1(:,1), wall_1(:,2),'k-');
%     plot(wall_2(:,1), wall_2(:,2),'k-');
%     plot(wall_3(:,1), wall_3(:,2),'k-');

    xlabel('y, m'); ylabel('x, m');
end

%% Plot results
% *----------------------------------*
%  YOU CAN ADD OR CHANGE FIGURES HERE
%  don't forget to add axis labels!
% *----------------------------------*

figure(2); hold on; grid on;
plot(state(:,20), state(:,19));
title('Y against X')

figure(3); hold on; grid on;
plot(time, state(:,19));
title('X against time')

figure(4); hold on; grid on;
plot(time, state(:,24));
title('Heading angle against time')

figure(5); hold on; grid on;
plot(angle_difference(:));
title('angle_difference')



